*dpp-ext-installer.txt*	Installer ext for dpp.vim

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS                                          *dpp-ext-installer-contents*

Introduction		|dpp-ext-installer-introduction|
Install			|dpp-ext-installer-install|
Interface		|dpp-ext-installer-interface|
  Actions		  |dpp-ext-installer-actions|
  Params		  |dpp-ext-installer-params|
  Autocmds		  |dpp-ext-installer-autocmds|
Examples		|dpp-ext-installer-examples|
FAQ			|dpp-ext-installer-faq|
Compatibility		|dpp-ext-installer-compatibility|


==============================================================================
INTRODUCTION                                  *dpp-ext-installer-introduction*

This ext implements plugins installer.

NOTE: It does not work for |dpp-plugin-option-frozen| and
|dpp-plugin-option-local| plugins.


==============================================================================
INSTALL                                            *dpp-ext-installer-install*

Please install both "dpp.vim" and "denops.vim".

https://github.com/Shougo/dpp.vim
https://github.com/vim-denops/denops.vim

And you need to install protocol like "dpp-protocol-git".

https://github.com/Shougo/dpp-protocol-git


==============================================================================
INTERFACE                                        *dpp-ext-installer-interface*


------------------------------------------------------------------------------
ACTIONS                                            *dpp-ext-installer-actions*

                                              *dpp-ext-installer-action-build*
build
		Build plugins.
		NOTE: It is also executed when plugins are installed/updated.

		params:
			{names}:	Plugin names.
					(Default: [])

                                    *dpp-ext-installer-action-checkNotUpdated*
checkNotUpdated
		Check not updated plugins by github GraqhQL API.
		https://docs.github.com/en/graphql
		NOTE: It is available for github plugins only.
		NOTE: |dpp-ext-installer-param-githubAPIToken| must be set.
		NOTE: It does not return value.
		NOTE: The update check is quicker than
		|dpp-ext-installer-action-update| but it is not perfect
		solution. github API cannot detect upstream changes
		immediately.

		params:
			{names}:	Plugin names.
					(Default: [])
			{force}:	Force update plugins if possible.
					(Default: false)

                                          *dpp-ext-installer-action-denoCache*
denoCache
		Execute "deno cache --reload" for plugins.
		NOTE: "deno" command is required.
		NOTE: It is also executed when plugins are installed/updated.

		params:
			{names}:	Plugin names.
					(Default: [])

                                            *dpp-ext-installer-action-getLogs*
getLogs
		Get all previous logs.

                                    *dpp-ext-installer-action-getNotInstalled*
getNotInstalled
		Get not installed plugins.

		params:
			{names}:	Plugin names.
					(Default: [])

                                      *dpp-ext-installer-action-getNotUpdated*
getNotUpdated
		Get not updated plugins by github GraqhQL API.
		https://docs.github.com/en/graphql.
		NOTE: It is available for github plugins only.
		NOTE: |dpp-ext-installer-param-githubAPIToken| must be set.
		NOTE: The update check is quicker than
		|dpp-ext-installer-action-update| but it is not perfect
		solution. github API cannot detect upstream changes
		immediately.

		params:
			{names}:	Plugin names.
					(Default: [])

                                      *dpp-ext-installer-action-getUpdateLogs*
getUpdateLogs
		Get all previous update logs.

                                            *dpp-ext-installer-action-install*
install
		Install plugins.

		NOTE: The rollback file is saved under
		"{base-path}/{name}/{YYMMDDhhmmss}" directory.

		params:
			{names}:	Plugin names.
					(Default: [])
			{rollback}:	Rollback date.
					It must be "YYMMDDhhmmss" format or
					"latest".
					(Default: "")

                                            *dpp-ext-installer-action-recache*
recache
		Re-make the dpp runtimepath cache and execute |:helptags|.
		It is called automatically after
		|dpp-ext-installer-action-install| or
		|dpp-ext-installer-action-update|.

                                          *dpp-ext-installer-action-reinstall*
reinstall
		Reinstall plugins.

		NOTE: The rollback file is saved under
		"{base-path}/{name}/{YYMMDDhhmmss}" directory.

		params:
			{names}:	Plugin names.
					(Required)
			{rollback}:	Rollback date.
					It must be "YYMMDDhhmmss" format or
					"latest".
					(Default: "")

                                             *dpp-ext-installer-action-update*
update
		Update plugins.

		NOTE: The rollback file is saved under
		"{base-path}/{name}/{YYMMDDhhmmss}" directory.

		params:
			{names}:	Plugin names.
					(Default: [])
			{rollback}:	Rollback date.
					It must be "YYMMDDhhmmss" format or
					"latest".
					(Default: "")

------------------------------------------------------------------------------
PARAMS                                              *dpp-ext-installer-params*

                                           *dpp-ext-installer-param-checkDiff*
checkDiff
		It checks plugins documentation diff when updated plugins.
		NOTE: It outputs the diff to new buffer in the background.

		Defaults: v:false

                                      *dpp-ext-installer-param-githubAPIToken*
githubAPIToken
		Github API token for
		|dpp-ext-installer-action-checkNotUpdated|.

		Defaults: ""

                                         *dpp-ext-installer-param-logFilePath*
logFilePath
		The log file output path.

		Defaults: ""

                                        *dpp-ext-installer-param-maxProcesses*
maxProcesses
		The max number of processes used for update.

		Defaults: 5

------------------------------------------------------------------------------
AUTOCMDS                                          *dpp-ext-installer-autocmds*

dpp-ext-installer defines some |User| autocmds.

                      *dpp-ext-installer-autocmd-Dpp:ext:installer:updateDone*
Dpp:ext:installer:updateDone
		Called after updated plugins.
		NOTE: It is called if updated plugins are empty.

==============================================================================
EXAMPLES                                          *dpp-ext-installer-examples*
>
	" Install plugins
	call dpp#async_ext_action('installer', 'install')

	" Update plugins
	call dpp#async_ext_action('installer', 'update')

	" Update plugins with specify rollback revisions
	call dpp#async_ext_action('installer', 'update',
	\ #{ rollback: 'latest' })

	" Update dpp.vim
	call dpp#async_ext_action('installer', 'update',
	\ #{ names: ['dpp.vim'] })

	" Check not updated plugins
	call dpp#async_ext_action('installer', 'checkNotUpdated')

	" Get not installed plugins
	echo dpp#sync_ext_action('installer', 'getNotInstalled')
<

==============================================================================
FAQ                                                    *dpp-ext-installer-faq*

FAQ 1:                                               |dpp-ext-installer-faq-1|
	The installation/update is slow.

FAQ 2:                                               |dpp-ext-installer-faq-2|
	I want to update from shell.

FAQ 3:                                               |dpp-ext-installer-faq-3|
	I want to quit Vim after updated plugins.

FAQ 4:                                               |dpp-ext-installer-faq-4|
	I want to get not updated plugins by Ddu.

------------------------------------------------------------------------------
                                                     *dpp-ext-installer-faq-1*
Q: The installation/update is slow.

A: You can change |dpp-ext-installer-param-maxProcesses| value.

                                                     *dpp-ext-installer-faq-2*
Q: I want to update from shell.

A: Sorry.  It is not supported.  I have tested it, but it does not work.

                                                     *dpp-ext-installer-faq-3*
Q: I want to quit Vim after updated plugins.

A: >
	autocmd User Dpp:ext:installer:updateDone quit
<

                                                     *dpp-ext-installer-faq-4*
Q: I want to get not updated plugins by Ddu.

A: >
	call ddu#start(#{
	    \   sources: [
	    \     #{
	    \       name: 'dpp',
	    \       params: #{
	    \         names: dpp#sync_ext_action('installer', 'getNotUpdated')
	    \                ->map({_, val -> val.name}),
	    \       },
	    \     },
	    \   ],
	    \ })

==============================================================================
COMPATIBILITY                                *dpp-ext-installer-compatibility*

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
